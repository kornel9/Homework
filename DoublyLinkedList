class Node:
    def __init__(self, key):
        self.key = key
        self.next = None 
        self.prev = None 

    def __str__(self):
        return f"Node({self.key})"

class DoublyLinkedList:
    def __init__(self):
        self.head = None
        self.tail = None

    def append(self, key):
        new_Node = Node(key)
        if self.head is None:
            self.head = new_Node
            self.tail = new_Node
            return

        else:
            self.tail.next = new_Node
            new_Node.prev = self.tail
            self.tail = new_Node

    def find(self, key):
        current_Node = self.head
        while current_Node:
            if current_Node.key == key:
                return current_Node
            current_Node = current_Node.next
        return None

    def insert(self, prev_node_key, key):
        new_Node = Node(key)

        if prev_node_key is None:
            if self.head is not None:  
                new_Node.next = self.head
                self.head.prev = new_Node
                self.head = new_Node
            else:
                self.head = new_Node
                self.tail = new_Node
        else:
            current_Node = self.find(prev_node_key)
            if current_Node is not None:  
                new_Node.next = current_Node.next
                new_Node.prev = current_Node
                if current_Node.next:
                    current_Node.next.prev = new_Node
                else:
                    self.tail = new_Node
                current_Node.next = new_Node

    def remove(self, key):
        remove_Node = self.find(key)

        if remove_Node is not None:
            if remove_Node.prev is None and remove_Node.next is None:
                self.head = None
                self.tail = None

            elif remove_Node.prev is None:
                self.head = remove_Node.next
                self.head.prev = None

            elif remove_Node.next is None:
                self.tail = remove_Node.prev
                self.tail.next = None

            else:
                remove_Node.prev.next = remove_Node.next
                remove_Node.next.prev = remove_Node.prev

            remove_Node.next = None
            remove_Node.prev = None

    def __str__(self):
        if self.head is None:
            return "DoublyLinkedList( )"
        
        current_node = self.head
        nodes_written = "DoublyLinkedList( Node("
        
        while current_node:
            nodes_written += f"{current_node.key}"
            if current_node.next:
                nodes_written += "), Node("
            current_node = current_node.next
        nodes_written += ") )"

        return nodes_written

class Queue:
    def __init__(self):
        self.data = DoublyLinkedList()

    def enqueue(self, key):
        self.data.append(key)

    def dequeue(self):
        if self.data.head is None:
            return None
        else:
            node_remove = self.data.head
            self.data.remove(node_remove.key)
            return node_remove

    def peek(self):
        if self.data.head is None:
            return None
        else:
            return self.data.head

    def size(self):
        current_node = self.data.head
        counter = 0
        while current_node:
            counter += 1
            current_node = current_node.next
        return counter

class Queue:
    def __init__(self):
        self.data = DoublyLinkedList()

    def enqueue(self, key):
        self.data.append(key)

    def dequeue(self):
        if self.data.head is None:
            return None
        else:
            node_remove = self.data.head
            self.data.remove(node_remove.key)
            return node_remove

    def peek(self):
        if self.data.head is None:
            return None
        else:
            return self.data.head

    def size(self):
        current_node = self.data.head
        counter = 0
        while current_node:
            counter += 1
            current_node = current_node.next
        return counter

class Queue:
    def __init__(self):
        self.data = DoublyLinkedList()

    def enqueue(self, key):
        self.data.append(key)

    def dequeue(self):
        if self.data.head is None:
            return None
        else:
            node_remove = self.data.head
            self.data.remove(node_remove.key)
            return node_remove

    def peek(self):
        if self.data.head is None:
            return None
        else:
            return self.data.head

    def size(self):
        current_node = self.data.head
        counter = 0
        while current_node:
            counter += 1
            current_node = current_node.next
        return counter

class Task:
    def __init__(self, name):
        self.name = name
        self.subtasks = Stack()

    def add_subtask(self, task):
        self.subtasks.push(task)

    def execute(self, level=0):
        indent = " " * (level * 4)
        print(f"{indent}Executing Task: {self.name}")
        while self.subtasks.size() > 0:
            node = self.subtasks.pop()
            subtask = node.key
            subtask.execute(level + 1)

class TaskManager:
    def __init__(self):
        self.task_queue = Queue()

    def add_task(self, task):
        self.task_queue.enqueue(task)

    def execute_next_task(self):
        node = self.task_queue.dequeue()
        if node is not None:
            task = node.key
            task.execute()
